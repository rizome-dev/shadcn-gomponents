package sidebar

import (
	g "maragu.dev/gomponents"
	html "maragu.dev/gomponents/html"
)

// Examples demonstrates various sidebar configurations
func Examples() g.Node {
	return html.Div(
		html.Class("space-y-8 p-8"),
		
		// Basic Sidebar Example
		html.Div(
			html.Class("space-y-4"),
			html.H3(html.Class("text-lg font-semibold"), g.Text("Basic Sidebar")),
			html.Div(
				html.Class("border rounded-lg p-4 h-[400px] relative overflow-hidden"),
				Provider(ProviderProps{DefaultOpen: true},
					html.Div(html.Class("flex w-full"),
						New(Props{},
							HeaderComponent(Props{},
								html.Div(html.Class("flex items-center gap-2"),
									g.Raw(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="size-5"><path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M2 17L12 22L22 17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M2 12L12 17L22 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>`),
									html.Span(html.Class("font-semibold"), g.Text("Acme Inc")),
								),
							),
							ContentComponent(Props{},
								Menu(Props{},
									MenuItem(Props{},
										MenuButton(MenuButtonProps{IsActive: true},
											g.Raw(`<svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M7.5 0.875C5.49797 0.875 3.875 2.49797 3.875 4.5C3.875 6.15288 4.98124 7.54738 6.49373 7.98351C5.2997 8.12901 4.27557 8.55134 3.50407 9.31167C2.52216 10.2794 2.125 11.5674 2.125 12.875C2.125 13.0408 2.25924 13.175 2.425 13.175C2.59076 13.175 2.725 13.0408 2.725 12.875C2.725 11.6993 3.05444 10.5533 3.89585 9.71036C4.74367 8.86164 5.88519 8.425 7.5 8.425C9.11481 8.425 10.2563 8.86164 11.1042 9.71036C11.9456 10.5533 12.275 11.6993 12.275 12.875C12.275 13.0408 12.4092 13.175 12.575 13.175C12.7408 13.175 12.875 13.0408 12.875 12.875C12.875 11.5674 12.4778 10.2794 11.4959 9.31167C10.7244 8.55134 9.7003 8.12901 8.50627 7.98351C10.0188 7.54738 11.125 6.15288 11.125 4.5C11.125 2.49797 9.50203 0.875 7.5 0.875ZM4.475 4.5C4.475 2.82861 5.82861 1.475 7.5 1.475C9.17139 1.475 10.525 2.82861 10.525 4.5C10.525 6.17139 9.17139 7.525 7.5 7.525C5.82861 7.525 4.475 6.17139 4.475 4.5Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>`),
											html.Span(g.Text("Profile")),
										),
									),
									MenuItem(Props{},
										MenuButton(MenuButtonProps{},
											g.Raw(`<svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8.69667 0.0403541C8.90859 0.131038 9.03106 0.354857 8.99316 0.582235L8.0902 6.00001H12.5C12.6893 6.00001 12.8625 6.10701 12.9472 6.27641C13.0319 6.4458 13.0136 6.6485 12.8999 6.80001L6.89997 14.8C6.76167 14.9844 6.51521 15.0503 6.30328 14.9597C6.09135 14.869 5.96888 14.6452 6.00678 14.4178L6.90974 9H2.49999C2.31061 9 2.13748 8.893 2.05278 8.72361C1.96809 8.55422 1.98636 8.35151 2.09999 8.2L8.09997 0.200038C8.23828 0.0156255 8.48474 -0.0503301 8.69667 0.0403541ZM3.49999 8.00001H7.49997C7.64695 8.00001 7.78648 8.06467 7.88148 8.17682C7.97648 8.28896 8.01733 8.43723 7.99317 8.5822L7.33027 12.5596L11.5 7.00001H7.49997C7.353 7.00001 7.21347 6.93534 7.11846 6.8232C7.02346 6.71105 6.98261 6.56279 7.00678 6.41781L7.66968 2.44042L3.49999 8.00001Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>`),
											html.Span(g.Text("Billing")),
										),
										MenuBadge(Props{}, g.Text("New")),
									),
									MenuItem(Props{},
										MenuButton(MenuButtonProps{},
											g.Raw(`<svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12.5 3L2.5 3.00002C1.67157 3.00002 1 3.6716 1 4.50002V9.50003C1 10.3285 1.67157 11 2.5 11H7.50003C7.63264 11 7.75982 11.0527 7.85358 11.1465L10 13.2929V11.5C10 11.2239 10.2239 11 10.5 11H12.5C13.3284 11 14 10.3285 14 9.50003V4.5C14 3.67157 13.3284 3 12.5 3ZM2.49999 2.00002L12.5 2C13.8807 2 15 3.11929 15 4.5V9.50003C15 10.8807 13.8807 12 12.5 12H11V14.5C11 14.7022 10.8782 14.8845 10.6913 14.9619C10.5045 15.0393 10.2894 14.9965 10.1464 14.8536L7.29292 12H2.5C1.11929 12 0 10.8807 0 9.50003V4.50002C0 3.11931 1.11928 2.00003 2.49999 2.00002Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>`),
											html.Span(g.Text("Messages")),
										),
										MenuBadge(Props{}, g.Text("12")),
									),
								),
							),
							FooterComponent(Props{},
								html.Div(html.Class("flex items-center gap-2"),
									html.Div(html.Class("size-8 rounded-full bg-muted"),),
									html.Div(html.Class("flex flex-col"),
										html.P(html.Class("text-sm font-medium"), g.Text("John Doe")),
										html.P(html.Class("text-xs text-muted-foreground"), g.Text("john@example.com")),
									),
								),
							),
						),
						Inset(Props{},
							html.Div(html.Class("flex h-full items-center justify-center text-muted-foreground"),
								g.Text("Main Content Area"),
							),
						),
					),
				),
			),
		),

		// Collapsible Variants
		html.Div(
			html.Class("space-y-4"),
			html.H3(html.Class("text-lg font-semibold"), g.Text("Collapsible Variants")),
			
			// Icon Collapsible
			html.Div(
				html.Class("space-y-2"),
				html.H4(html.Class("text-sm font-medium"), g.Text("Icon Collapsible")),
				html.Div(
					html.Class("border rounded-lg p-4 h-[300px] relative overflow-hidden"),
					Provider(ProviderProps{},
						html.Div(html.Class("flex w-full"),
							New(Props{Collapsible: "icon"},
								HeaderComponent(Props{},
									g.Raw(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="size-5"><path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>`),
								),
								ContentComponent(Props{},
									Menu(Props{},
										MenuItem(Props{},
											MenuButton(MenuButtonProps{Tooltip: "Dashboard"},
												g.Raw(`<svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M7.5 0.875C11.4305 0.875 14.625 4.06951 14.625 8C14.625 11.9305 11.4305 15.125 7.5 15.125C3.56951 15.125 0.375 11.9305 0.375 8C0.375 4.06951 3.56951 0.875 7.5 0.875ZM7.5 1.90625C4.1359 1.90625 1.40625 4.6359 1.40625 8C1.40625 11.3641 4.1359 14.0938 7.5 14.0938C10.8641 14.0938 13.5938 11.3641 13.5938 8C13.5938 4.6359 10.8641 1.90625 7.5 1.90625Z" fill="currentColor"/></svg>`),
												html.Span(g.Text("Dashboard")),
											),
										),
										MenuItem(Props{},
											MenuButton(MenuButtonProps{Tooltip: "Analytics"},
												g.Raw(`<svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M11.5 1C11.7761 1 12 1.22386 12 1.5V13.5C12 13.7761 11.7761 14 11.5 14C11.2239 14 11 13.7761 11 13.5V1.5C11 1.22386 11.2239 1 11.5 1ZM9.5 3C9.77614 3 10 3.22386 10 3.5V13.5C10 13.7761 9.77614 14 9.5 14C9.22386 14 9 13.7761 9 13.5V3.5C9 3.22386 9.22386 3 9.5 3ZM13.5 3C13.7761 3 14 3.22386 14 3.5V13.5C14 13.7761 13.7761 14 13.5 14C13.2239 14 13 13.7761 13 13.5V3.5C13 3.22386 13.2239 3 13.5 3ZM5.5 4C5.77614 4 6 4.22386 6 4.5V13.5C6 13.7761 5.77614 14 5.5 14C5.22386 14 5 13.7761 5 13.5V4.5C5 4.22386 5.22386 4 5.5 4ZM1.5 5C1.77614 5 2 5.22386 2 5.5V13.5C2 13.7761 1.77614 14 1.5 14C1.22386 14 1 13.7761 1 13.5V5.5C1 5.22386 1.22386 5 1.5 5ZM7.5 5C7.77614 5 8 5.22386 8 5.5V13.5C8 13.7761 7.77614 14 7.5 14C7.22386 14 7 13.7761 7 13.5V5.5C7 5.22386 7.22386 5 7.5 5ZM3.5 7C3.77614 7 4 7.22386 4 7.5V13.5C4 13.7761 3.77614 14 3.5 14C3.22386 14 3 13.7761 3 13.5V7.5C3 7.22386 3.22386 7 3.5 7Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>`),
												html.Span(g.Text("Analytics")),
											),
										),
									),
								),
							),
							Inset(Props{},
								html.Div(html.Class("p-4"),
									g.Text("Icon collapsible sidebar shows only icons when collapsed"),
								),
							),
						),
					),
				),
			),
		),

		// Sidebar Variants
		html.Div(
			html.Class("space-y-4"),
			html.H3(html.Class("text-lg font-semibold"), g.Text("Sidebar Variants")),
			
			// Floating Sidebar
			html.Div(
				html.Class("space-y-2"),
				html.H4(html.Class("text-sm font-medium"), g.Text("Floating Variant")),
				html.Div(
					html.Class("border rounded-lg p-4 h-[300px] relative overflow-hidden bg-muted/10"),
					Provider(ProviderProps{},
						html.Div(html.Class("flex w-full"),
							New(Props{Variant: "floating"},
								HeaderComponent(Props{},
									html.P(html.Class("font-semibold"), g.Text("Floating Sidebar")),
								),
								ContentComponent(Props{},
									html.P(html.Class("text-sm text-muted-foreground p-2"), 
										g.Text("This sidebar has rounded corners and a shadow"),
									),
								),
							),
							Inset(Props{},
								html.Div(html.Class("p-4"),
									g.Text("Floating sidebar variant"),
								),
							),
						),
					),
				),
			),

			// Inset Sidebar
			html.Div(
				html.Class("space-y-2"),
				html.H4(html.Class("text-sm font-medium"), g.Text("Inset Variant")),
				html.Div(
					html.Class("border rounded-lg p-4 h-[300px] relative overflow-hidden"),
					Provider(ProviderProps{},
						html.Div(html.Class("flex w-full"),
							New(Props{Variant: "inset"},
								HeaderComponent(Props{},
									html.P(html.Class("font-semibold"), g.Text("Inset Sidebar")),
								),
								ContentComponent(Props{},
									html.P(html.Class("text-sm text-muted-foreground p-2"), 
										g.Text("This sidebar creates an inset effect with the main content"),
									),
								),
							),
							Inset(Props{},
								html.Div(html.Class("p-4"),
									g.Text("Inset variant creates rounded corners on main content"),
								),
							),
						),
					),
				),
			),
		),

		// Menu Components
		html.Div(
			html.Class("space-y-4"),
			html.H3(html.Class("text-lg font-semibold"), g.Text("Menu Components")),
			html.Div(
				html.Class("border rounded-lg p-4"),
				Menu(Props{},
					MenuItem(Props{},
						MenuButton(MenuButtonProps{}, g.Text("Regular Item")),
					),
					MenuItem(Props{},
						MenuButton(MenuButtonProps{IsActive: true}, g.Text("Active Item")),
					),
					MenuItem(Props{},
						MenuButton(MenuButtonProps{Variant: "outline"}, g.Text("Outline Variant")),
					),
					MenuItem(Props{},
						MenuButton(MenuButtonProps{Size: "sm"}, g.Text("Small Size")),
					),
					MenuItem(Props{},
						MenuButton(MenuButtonProps{Size: "lg"}, g.Text("Large Size")),
					),
					MenuItem(Props{},
						MenuButton(MenuButtonProps{}, 
							g.Text("With Action"),
						),
						MenuAction(Props{}, g.Text("⋮")),
					),
					MenuItem(Props{},
						MenuButton(MenuButtonProps{}, 
							g.Text("With Badge"),
						),
						MenuBadge(Props{}, g.Text("99+")),
					),
				),
			),
		),

		// Submenu Example
		html.Div(
			html.Class("space-y-4"),
			html.H3(html.Class("text-lg font-semibold"), g.Text("Submenu")),
			html.Div(
				html.Class("border rounded-lg p-4"),
				Menu(Props{},
					MenuItem(Props{},
						MenuButton(MenuButtonProps{}, g.Text("Parent Item")),
					),
					MenuSub(Props{},
						MenuSubItem(Props{},
							MenuSubButton(MenuSubButtonProps{}, g.Text("Sub Item 1")),
						),
						MenuSubItem(Props{},
							MenuSubButton(MenuSubButtonProps{IsActive: true}, g.Text("Active Sub Item")),
						),
						MenuSubItem(Props{},
							MenuSubButton(MenuSubButtonProps{Size: "sm"}, g.Text("Small Sub Item")),
						),
					),
				),
			),
		),

		// Group Example
		html.Div(
			html.Class("space-y-4"),
			html.H3(html.Class("text-lg font-semibold"), g.Text("Groups")),
			html.Div(
				html.Class("border rounded-lg p-4"),
				html.Div(html.Class("space-y-4"),
					Group(Props{},
						GroupLabel(Props{}, g.Text("Application")),
						GroupContent(Props{},
							Menu(Props{},
								MenuItem(Props{},
									MenuButton(MenuButtonProps{}, g.Text("Dashboard")),
								),
								MenuItem(Props{},
									MenuButton(MenuButtonProps{}, g.Text("Settings")),
								),
							),
						),
					),
					Separator(Props{}),
					Group(Props{},
						GroupLabel(Props{}, g.Text("Account")),
						GroupAction(Props{}, g.Text("+")),
						GroupContent(Props{},
							Menu(Props{},
								MenuItem(Props{},
									MenuButton(MenuButtonProps{}, g.Text("Profile")),
								),
								MenuItem(Props{},
									MenuButton(MenuButtonProps{}, g.Text("Billing")),
								),
							),
						),
					),
				),
			),
		),

		// Other Components
		html.Div(
			html.Class("space-y-4"),
			html.H3(html.Class("text-lg font-semibold"), g.Text("Other Components")),
			html.Div(
				html.Class("space-y-4"),
				// Skeleton
				html.Div(
					html.Class("space-y-2"),
					html.H4(html.Class("text-sm font-medium"), g.Text("Menu Skeleton")),
					html.Div(
						html.Class("border rounded-lg p-4"),
						Menu(Props{},
							html.Li(MenuSkeleton(Props{}, true)),
							html.Li(MenuSkeleton(Props{}, true)),
							html.Li(MenuSkeleton(Props{}, false)),
						),
					),
				),
				// Input
				html.Div(
					html.Class("space-y-2"),
					html.H4(html.Class("text-sm font-medium"), g.Text("Sidebar Input")),
					html.Div(
						html.Class("border rounded-lg p-4"),
						html.Input(
							html.Class("placeholder:text-muted-foreground"),
							g.Attr("placeholder", "Search..."),
						),
					),
				),
				// Trigger
				html.Div(
					html.Class("space-y-2"),
					html.H4(html.Class("text-sm font-medium"), g.Text("Sidebar Trigger")),
					html.Div(
						html.Class("border rounded-lg p-4"),
						Trigger(Props{}, nil),
					),
				),
			),
		),
	)
}